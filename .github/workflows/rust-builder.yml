name: "Rust Auditable Builder"

on:
# debug:
#  workflow_dispatch:
  workflow_call:
    inputs:
      component:
        description: 'Component user/repo'
        required: true
        type: string
      serial:
        description: 'Unique Serial Cache Id'
        required: true
        type: string
      use-cache:
        description: 'Use cache?'
        required: true
        default: true
        type: boolean
      use-locked:
        description: 'Use locked?'
        required: true
        default: true
        type: boolean        
      os:
        description: 'GitHub Runner'
        required: true
        type: string
      rust-target:
        description: 'Rust Target'
        required: true
        type: string
      rust:
        description: 'Rust Version'
        required: true
        type: string
      zig-version:
        description: 'Zig version'
        required: true
        default: 0.9.1
        type: string

jobs:

  rust-builder:
    name: Rust ${{ inputs.component }} @ ${{ inputs.serial }} for ${{ inputs.rust-target }} on (${{ inputs.os }})
    runs-on: ${{ inputs.os }}
    strategy:
      fail-fast: false
    env:
      TARGET_DIR: target/${{ inputs.rust-target }}/release
      REPO_NORMAL: unknown-unknown
    steps:
      - run: |
          REPO_NORMAL=$(echo ${{ inputs.component }} | sed 's/\//-/')
          echo "REPO_NORMAL=$REPO_NORMAL" >> $GITHUB_ENV
      - name: Pull zig-helper
        uses: actions/checkout@v3
        with:
          repository: rinse-repeat/zig-gh-helper
          path: zig-helper
      - name: Environment ZIG (Non-Windows)
        if: ${{ contains(inputs.os, 'windows') == false }}
        run: |
          source ./zig-helper/zig_map.sh
          zig_triplets_env $GITHUB_ENV ${{ inputs.rust-target }}
          cat $GITHUV_ENV
      - uses: actions/checkout@v3
        with:
          repository: ${{ inputs.component }}
      - name: NIX Cache ZIG
        if: ${{ contains(inputs.os, 'windows') == false }}
        uses: actions/cache@v3
        with:
          key: zig-${{ env.ZIG_OS }}-${{ env.ZIG_ARCH }}-${{ inputs.zig-version }}-AAA
          path: ~/zig/zig-${{ env.ZIG_OS }}-${{ env.ZIG_ARCH }}-${{ inputs.zig-version }}
      - name: Debug
        run: |
          echo Home=$HOME
          echo GITHUB_WORKSPACE=$GITHUB_WORKSPACE
          ls -la ./
          find $HOME -type f -name cargo-auditable
          find $HOME -type d -name \*zig\*
#          cp -R zig $HOME/
#          find $HOME -type d -name \*zig\*
          echo PWD=$PWD
      - name: System
        if: ${{ startsWith(inputs.os, 'ubuntu') }}
        run: sudo apt update && sudo apt upgrade && sudo apt install -qq lld crossbuild-essential-arm64 crossbuild-essential-armhf

      ######################################################
      # Rust, Cargo Tools - Auditable, rust-audit-info
      #
      # https://github.com/rust-secure-code/cargo-auditable
      #
      - name: Install Rust ${{ inputs }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ inputs.rust }}
          override: true
          target: ${{ inputs.rust-target }}
      - name: Cache Cargo Tools
        if: ${{ inputs.use-cache }}
        uses: actions/cache@v3
        with:
          key: cargo-tools-${{ inputs.os }}-${{ inputs.rust-target }}-20220827-000
          path: |
            .cargo/bin/cargo-auditable
            .cargo/bin/rust-audit-info
#      - name: ls
#        run: ls -laR $HOME/
      - name: Install Cargo Tools
        run: |
          if [[ ! -f $HOME/.cargo/bin/cargo-auditable ]]; then
            cargo install cargo-auditable rust-audit-info
          fi
      - name: Debug
        run: |
          echo Home=$HOME
          echo GITHUB_WORKSPACE=$GITHUB_WORKSPACE
          ls -la ./
          find $HOME -type f -name cargo-auditable
          find $HOME -type d -name \*zig\*
          echo PWD=$PWD
      #######################################################
      # Zig & Cross-Compiling
      #
      - name: .Cargo setup for Zig
        run: |
          cat >~/.cargo/config <<EOF
          [target.x86_64-unknown-linux-gnu]
          linker = "$HOME/zig/zig-${{ env.ZIG_OS }}-${{ env.ZIG_ARCH }}-${{ inputs.zig-version }}/zig cc"
          #[target.x86_64-apple-darwin]
          #[target.aarch64-unknown-linux-gnu]
          #linker = "aarch64-linux-gnu-gcc"
          #[target.aarch64-unknown-linux-musl]
          #linker = "aarch64-linux-gnu-gcc"
          #[target.armv7-unknown-linux-gnueabihf]
          #linker = "arm-linux-gnueabihf-gcc"
          #[target.armv7-unknown-linux-musleabihf]
          #linker = "arm-linux-gnueabihf-gcc"
          #[target.arm-unknown-linux-gnueabihf]
          #linker = "arm-linux-gnueabihf-gcc"
          #[target.arm-unknown-linux-musleabihf]
          #linker = "arm-linux-gnueabihf-gcc"
          EOF
      ######################################################
      # Use serials:
      # PR-XXX-DATE
      # 
      - uses: Swatinem/rust-cache@v2
        if: ${{ inputs.use-cache }}
        with:
          key: ${{ inputs.os }}-${{ inputs.rust-target }}-${{ inputs.component }}-${{ inputs.serial }}-000

      - name: Build Auditable Build (Locked)
        if: ${{ inputs.use-locked == true }}
        run: |
          cargo auditable build --release --locked --bins --color always --target ${{ inputs.rust-target }} --target-dir ${{ env.TARGET_DIR }}

      - name: Build Auditable Build (Unlocked)
        if: ${{ inputs.use-locked == false }}
        run: |
          cargo auditable build --release --bins --color always --target ${{ inputs.rust-target }} --target-dir ${{ env.TARGET_DIR }}

      - name: ls -laR (debug)
        run: ls -laR target/
      ######################################################
      # Upload artifacts
      #
      # target/x86_64-unknown-linux-gnu/release/x86_64-unknown-linux-gnu - !!
      #
      - name: Upload artifact - ${{ inputs.component }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ inputs.rust-target }}
          path: |
            ${{ env.TARGET_DIR }}/${{ inputs.rust-target }}/release
            !${{ env.TARGET_DIR }}/${{ inputs.rust-target }}/release/build
            !${{ env.TARGET_DIR }}/${{ inputs.rust-target }}/release/deps
            # .fingerprint .cargo-lock
            !${{ env.TARGET_DIR }}/${{ inputs.rust-target }}/release/.*
            !${{ env.TARGET_DIR }}/${{ inputs.rust-target }}/release/*.d
          retention-days: 1