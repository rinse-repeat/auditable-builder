name: "Rust Release Builder"

on:
#  workflow_dispatch:
  workflow_call:
    inputs:
      repository:
        description: 'Repository'
        required: true
        type: string
      tag:
        description: 'Release tag'
        required: true
        type: string

jobs:

  release:
    runs-on: ubuntu-latest
    env:
      REPO_NORMAL: unknown-unknown
    steps:
      #############################################################
      # Build a clean source release artefact by:
      #
      # 1) Checkout the source from source repo
      # 2) Figure out the to-be-released version from Cargo.toml
      # 3) Isolate the release source into a clean branch
      # 4) Roll the release from the 3) branch and include the built binary artifacts
      #
      - run: |
          REPO_ONLY_NORMAL=$(echo ${{ inputs.repository }} | sed 's/.*\///')
          echo "REPO_ONLY_NORMAL=$REPO_ONLY_NORMAL" >> $GITHUB_ENV
          REPO_NORMAL=$(echo ${{ inputs.repository }} | sed 's/\//-/')
          echo "REPO_NORMAL=$REPO_NORMAL" >> $GITHUB_ENV
          
      - name: Checkout ${{ inputs.repository }} Repository
        uses: actions/checkout@v2
        with:
          path: repo
          repository: ${{ github.event.inputs.repository }}
      - name: Set TAG_VERSION for ${{ github.event.inputs.repository }}
        shell: bash
        run: |
          echo "TAG_VERSION=`grep -m 1 -oP 'version\s*=\s*\"\K\d+\.\d+\.\d+(?=\")' Cargo.toml`" | tee -a $GITHUB_ENV
      - name: Print Environment
        run: |
          echo "TAG_VERSION = ${{ env.TAG_VERSION }}"
      - name: Tar
        run: |
          tar --directory=repo -cvf repo-src.tar ./
          mkdir repo-src; tar --directory=repo-src -xvf repo-src.tar
      - name: Unlink Source Repo
        run: |
          rm -rf repo
      - name: Bring Release Base Repo
        uses: actions/checkout@v2
        with:
          path: fused
          repository: pinkforest/test-auditable-releases
      - name: Prepare Release Base Repo
        run: |
          cd fused/;find -not -path "./.git/*" -not -name ".git" -exec git rm -r {} +
      - name: Fuse Repo Source
        run: |
          cp -R ./repo-src/* ./fused/
      - name: Commit Fused Isolated Repo
        uses: EndBug/add-and-commit@v8
        with:
          author_name: Releaser
          author_email: no_spam@nowhere.nowhere.devnull
          message: 'Release'
          new_branch: ${{ github.event.inputs.repository }}@${{ github.event.inputs.tag }}
          add: '.'
          cwd: './fused/'
      ###################################################
      # Pull all the previously built worflow artifacts
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
        with:
          path: binaries
      - name: LS
        run: ls -laR ./
      #################################################################################################
      # Normalise Docker Tar artifacts into release artifacts in ./binaries without hardcoding triples
      # xx-aarch64-unknown-linux-gnu.tar lives under same directory name
# TODO: Docker
#      - name: Normalise Docker tarball names for Release artifacts
#        run: |
#          cd binaries
#          function rename_docker_tar() {
#            DOCKER_PATH=$1
#            mv "${DOCKER_PATH}" "${DOCKER_PATH}.tmp" ; mv "${DOCKER_PATH}.tmp/${DOCKER_PATH}" ./ ; rm -r "${DOCKER_PATH}.tmp"
#          }
#          export -f rename_docker_tar
#          find . -type f -name xxx-\*.tar -exec echo '{}' \; | grep -oP './\K.+(?=\/)' | xargs -d $'\n' bash -c 'for arg do rename_docker_tar "$arg"; done' _
      ###################################################################################################
      # Normalise built artifacts into release artifacts in ./binaries without hardcoding triples
      # binaries/normalised-name-triplet/binary -> binary-normalised-name-triplet.bin
      - name: Normalise binary names for Release artifacts
        run: |
          cd binaries
          find . -type f -name \* | sed -r 's/\.\/([A-Za-z0-9_\-]+)\/([A-Za-z0-9_\-]+)/mv \0 \2-\1.bin/' | xargs -d $'\n' sh -c 'for arg do $arg ; done' _
      # find . -regextype posix-extended -type d -name "[^.]*" | xargs -d $'\n' sh -c 'for arg do rm -r $arg ; done' _
      ###################################
      # Bundle the final release out
      #
      # - Release branch (via commit) is the clean isolated source
      # - ./binaries contain all the binaries
      #
      - name: Release 
        uses: ncipollo/release-action@v1
        id: create_release
        with:
          tag: ${{ env.REPO_ONLY_NORMAL }}@${{ github.event.inputs.tag }}
          draft: false
          prerelease: false
          commit: ${{ github.event.inputs.repository }}@${{ github.event.inputs.tag }}
          removeArtifacts: true
          artifacts: "./binaries/*.bin"
          token: ${{ secrets.GITHUB_TOKEN }}